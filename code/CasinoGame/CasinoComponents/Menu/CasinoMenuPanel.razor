@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Network;
@using Sandbox.Diagnostics;
@inherits PanelComponent

<root>

    <div class="lobby-list">

        <div class="header">
            <div class="title">Server List</div>
        </div>

        @if (refreshing)
        {
            <div>Refreshing..</div>
        }
        else if (list.Count == 0)
        {
            <div>No lobbies were found</div>
        }
        else
        {
            @foreach (var lobby in list)
            {
                <div class="button" onclick=@(() => OpenLobby( lobby ) )>

                    <div class="title">
                        @lobby.Name
                    </div>

                    <div class="meta">

                        <div class="map">
                            @lobby.Map
                        </div>

                        <div class="count">
                            @lobby.Members / @lobby.MaxMembers
                        </div>

                    </div>

                </div>
            }
        }
    </div>

</root>

@code
{
    void OpenScene( SceneFile file )
    {
        // GameManager.ActiveScene = new Scene();
        GameManager.ActiveScene.Load( file );

        var go = new GameObject( true, "Return To Menu" );
        go.Components.Create<ReturnToMenu>();
    }

    bool refreshing;
    List<LobbyInformation> list = new();

    protected override void OnEnabled()
    {
        base.OnEnabled();

        Assert.True(GameObject.IsValid());

        _ = RefreshLobbyList();
    }

    async Task RefreshLobbyList()
    {
        while ( true )
        {
            refreshing = true;
            StateHasChanged();

            list = await GameNetworkSystem.QueryLobbies();

            refreshing = false;
            StateHasChanged();

            await Task.DelayRealtimeSeconds( 5.0f );
        }
    }

    void OpenLobby( LobbyInformation lobby )
    {
        GameNetworkSystem.Connect( lobby.LobbyId );
    }

}
